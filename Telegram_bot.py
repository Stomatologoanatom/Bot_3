import os
import logging
import re
import asyncio
import requests
from html import unescape
from dotenv import load_dotenv
from telegram import Update, BotCommand, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)
from bs4 import BeautifulSoup

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# --- –ê–¥–º–∏–Ω—ã ---
try:
    ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))
except ValueError:
    ADMIN_IDS = []
    logger.warning("‚ö†Ô∏è ADMIN_IDS —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω.")

# --- –¢–µ–º—ã –∏ —Ñ–∞–π–ª—ã ---
THEMES = {
    "üè≥Ô∏è‚Äç‚ößÔ∏è –ï–≤—Ä–æ–ø–∞": "Europe.txt",
    "üçú –ê–∑–∏—è": "Asia.txt",
    "üíµ –ê–º–µ—Ä–∏–∫–∞": "America.txt",
    "üë≥‚Äç‚ôÇÔ∏è‚úàüè¢üè¢ –ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫": "MiddleEast.txt",
    "Œµ„Å§‚ñÑ‚ñà‚ñÄ‚ñà‚óè –ù–ê–¢–û": "NATO.txt"
}

# --- –ú–µ–Ω—é —Å —Ç–µ–º–∞–º–∏ ---
def get_theme_menu():
    return ReplyKeyboardMarkup(
        [[theme] for theme in THEMES.keys()],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# --- –û—á–∏—Å—Ç–∫–∞ HTML ---
def clean_html(raw_html: str) -> str:
    cleanr = re.compile('<.*?>')
    return unescape(re.sub(cleanr, '', raw_html)).strip()

# --- –ü–µ—Ä–µ–≤–æ–¥ ---
def translate_text_sync(text: str, lang_from="en", lang_to="ru") -> str:
    if not text.strip():
        return text
    try:
        url = "https://api.mymemory.translated.net/get"
        params = {"q": text[:500], "langpair": f"{lang_from}|{lang_to}"}
        response = requests.get(url, params=params, timeout=10)
        return response.json()['responseData']['translatedText']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text

async def translate_text(text: str) -> str:
    return await asyncio.to_thread(translate_text_sync, text)

# --- /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["searching"] = False
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –Ω–æ–≤–æ—Å—Ç–µ–π:",
        reply_markup=get_theme_menu()
    )

# --- /stop ---
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("searching", False):
        context.user_data["searching"] = False
        await update.message.reply_text("‚èπ –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–µ—Ä–≤–∞–Ω.")
    else:
        await update.message.reply_text("üîá –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –∑–∞–ø—É—â–µ–Ω.")

# --- –ü–∞—Ä—Å–∏–Ω–≥ HTML ---
async def parse_news_from_html(url: str, context: ContextTypes.DEFAULT_TYPE):
    headers = {
        "User-Agent": "Mozilla/5.0"
    }
    try:
        response = requests.get(url, headers=headers, timeout=10, verify=True)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')

        news_items = soup.find_all('article', limit=3) or soup.find_all('h2', limit=3)

        if not news_items:
            logger.info(f"üîç –ù–∞ {url} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–µ–≥–æ–≤")
            return []

        results = []
        for item in news_items:
            title_tag = item.find('a') or item.find('h2')
            title = title_tag.get_text(strip=True) if title_tag else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
            link = title_tag['href'] if title_tag and title_tag.has_attr('href') else url
            summary_tag = item.find('p')
            summary = summary_tag.get_text(strip=True) if summary_tag else ""
            results.append({
                "title": title,
                "summary": summary,
                "link": link
            })

        return results

    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ HTML —Å {url}: {e}")
        return []

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º—ã ---
async def handle_theme_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    theme = update.message.text
    feed_file = THEMES.get(theme)

    if not feed_file or not os.path.exists(feed_file):
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with open(feed_file, encoding='utf-8') as f:
        feeds = [line.strip() for line in f if line.strip()]

    if not feeds:
        await update.message.reply_text(f"‚ö†Ô∏è –í —Ñ–∞–π–ª–µ {feed_file} –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
        return

    context.user_data["searching"] = True
    await update.message.reply_text("üì° –ü–æ–ª—É—á–∞—é –Ω–æ–≤–æ—Å—Ç–∏...")

    for url in feeds:
        if not context.user_data.get("searching", False):
            await update.message.reply_text("‚èπ –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=get_theme_menu())
            return

        logger.info(f"üîÑ –ü–∞—Ä—Å–∏–Ω–≥: {url}")
        news_items = await parse_news_from_html(url, context)

        if not news_items:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å {url}")
            continue

        for news in news_items:
            if not context.user_data.get("searching", False):
                await update.message.reply_text("‚èπ –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=get_theme_menu())
                return

            title_ru = await translate_text(news["title"])
            summary_ru = await translate_text(news["summary"])

            message = (
                f"üì∞ <b>{title_ru}</b>\n"
                f"{summary_ru}\n"
                f"<a href=\"{news['link']}\">–ò—Å—Ç–æ—á–Ω–∏–∫</a>"
            )
            await update.message.reply_text(message, parse_mode="HTML", disable_web_page_preview=True)

    context.user_data["searching"] = False
    await update.message.reply_text("‚úÖ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.", reply_markup=get_theme_menu())

# --- –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ ‚Äî –≤—ã–±–æ—Ä —Ç–µ–º—ã ---
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text in THEMES:
        await handle_theme_choice(update, context)
    else:
        await update.message.reply_text("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏–∑ –º–µ–Ω—é.", reply_markup=get_theme_menu())

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def setup_commands(app):
    await app.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –Ω–æ–≤–æ—Å—Ç–µ–π"),
        BotCommand("stop", "–ü—Ä–µ—Ä–≤–∞—Ç—å –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π")
    ])

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        exit(1)

    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.post_init = setup_commands

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()
