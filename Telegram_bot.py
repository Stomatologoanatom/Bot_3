import feedparser
import os
import logging
import requests
import re
import asyncio
from html import unescape
from dotenv import load_dotenv
from telegram import Update, BotCommand, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    filters
)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —à—É–º–∞ ---
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram.bot").setLevel(logging.WARNING)
logging.getLogger("telegram.ext._application").setLevel(logging.WARNING)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ .env ---
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# --- –ê–¥–º–∏–Ω ID ---
try:
    ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))
except ValueError:
    ADMIN_IDS = []
    logger.warning("‚ö†Ô∏è ADMIN_IDS —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω.")

# --- –¢–µ–º—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã ---
THEMES = {
    "üè≥Ô∏è‚Äç‚ößÔ∏è –ï–≤—Ä–æ–ø–∞": "Europe.txt",
    "üçú –ê–∑–∏—è": "Asia.txt",
    "üíµ –ê–º–µ—Ä–∏–∫–∞": "America.txt",
    "üë≥‚Äç‚ôÇÔ∏è‚úàüè¢üè¢ –ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫": "MiddleEast.txt",
    "Œµ„Å§‚ñÑ‚ñà‚ñÄ‚ñà‚óè –ù–ê–¢–û": "NATO.txt"
    # –î–æ–±–∞–≤—å —Å–≤–æ–∏ —Ç–µ–º—ã –∏ —Ñ–∞–π–ª—ã —Ç—É—Ç
}

# --- –û—á–∏—Å—Ç–∫–∞ HTML-—Ç–µ–≥–æ–≤ ---
def clean_html(raw_html: str) -> str:
    cleanr = re.compile('<.*?>')
    return unescape(re.sub(cleanr, '', raw_html)).strip()

# --- –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ MyMemory ---
def translate_text_sync(text: str, lang_from="en", lang_to="ru") -> str:
    if not text.strip():
        return text
    try:
        url = "https://api.mymemory.translated.net/get"
        params = {"q": text[:500], "langpair": f"{lang_from}|{lang_to}"}
        response = requests.get(url, params=params, timeout=10)
        return response.json()['responseData']['translatedText']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ ---
async def translate_text(text: str) -> str:
    return await asyncio.to_thread(translate_text_sync, text)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton(theme)] for theme in THEMES.keys()]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ç–µ–º–∞—Ç–∏–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup=markup)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
async def handle_theme_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    theme = update.message.text
    feed_file = THEMES.get(theme)

    if not feed_file:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞. –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏–∑ –º–µ–Ω—é.")
        return

    if not os.path.exists(feed_file):
        await update.message.reply_text(f"‚ùå –§–∞–π–ª –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ–º—ã '{theme}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with open(feed_file, encoding='utf-8') as f:
        feeds = [line.strip() for line in f if line.strip()]

    if not feeds:
        await update.message.reply_text(f"‚ö†Ô∏è –í —Ñ–∞–π–ª–µ {feed_file} –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
        return

    await update.message.reply_text("üì° –°–∫–∞–Ω–∏—Ä—É—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏...")

    for url in feeds:
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {url}")
        try:
            feed = feedparser.parse(url)
            if feed.bozo:
                raise Exception(feed.bozo_exception)

            for entry in feed.entries[:3]:
                title = getattr(entry, 'title', "(–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)")
                summary = clean_html(entry.get("summary", "") or entry.get("description", ""))
                link = getattr(entry, 'link', "")

                translated_title = await translate_text(title)
                translated_summary = await translate_text(summary)

                message = (
                    f"üì∞ <b>{translated_title}</b>\n"
                    f"{translated_summary}\n"
                    f"<a href=\"{link}\">–ò—Å—Ç–æ—á–Ω–∏–∫</a>"
                )

                await update.message.reply_text(
                    message, parse_mode="HTML", disable_web_page_preview=True
                )

        except Exception as e:
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å {url}: {e}")

    await update.message.reply_text("‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–°—Ç–∞—Ä—Ç' –≤ –º–µ–Ω—é ---
async def setup_commands(app):
    await app.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É")
    ])

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª.")
        exit(1)

    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_theme_choice))

    app.post_init = setup_commands

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()
