import feedparser
from datetime import datetime, timedelta, timezone
import httpx
import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

FEEDS = [
    "https://feeds.reuters.com/reuters/worldNews",
    "https://feeds.bbci.co.uk/news/world/rss.xml",
    "https://rss.cnn.com/rss/edition_world.rss",
    "https://rss.cnn.com/rss/cnn_allpolitics.rss",
    "https://www.bloomberg.com/feed/podcast/politics.xml",
    "https://www.nbcnews.com/id/3032553/device/rss/rss.xml",
    "https://apnews.com/rss/apf-politics"
]

def is_recent(entry, hours=48):
    if 'published_parsed' in entry:
        pub_date = datetime(*entry.published_parsed[:6], tzinfo=timezone.utc)
        now = datetime.now(timezone.utc)
        delta = now - pub_date
        print(f"üïí {entry.title[:30]} ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {delta} –Ω–∞–∑–∞–¥")
        return delta <= timedelta(hours=hours)
    return False

async def translate_text(text: str) -> str:
    if not text.strip():
        return "(–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞)"
    try:
        url = "https://api.mymemory.translated.net/get"
        params = {"q": text, "langpair": "en|ru"}
        async with httpx.AsyncClient(timeout=10) as client:
            response = await client.get(url, params=params)
            response.raise_for_status()
            data = response.json()
            translated = data.get("responseData", {}).get("translatedText")
            if not translated:
                print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API: {response.text}")
                return "(–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)"
            return translated
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return f"(–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e})"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–∏—Ä–∞–µ—Ç –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π /news.")

async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîç –°–∫–∞–Ω–∏—Ä—É—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏, —Å–æ–±–∏—Ä–∞—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")

    for url in FEEDS:
        print(f"üì° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏—Å—Ç–æ—á–Ω–∏–∫: {url}")
        feed = feedparser.parse(url)
        count = 0
        for entry in feed.entries:
            if count >= 3:
                break
            if is_recent(entry):
                title = await translate_text(entry.title)
                summary = await translate_text(entry.get("summary", ""))
                link = entry.link

                message = f"üì∞ <b>{title}</b>\n{summary}\n<a href=\"{link}\">–ò—Å—Ç–æ—á–Ω–∏–∫</a>"
                await update.message.reply_text(message, parse_mode="HTML", disable_web_page_preview=True)
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {title}")
                count += 1

    await update.message.reply_text("‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

if __name__ == "__main__":
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .env —Å–æ–∑–¥–∞–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–∫–µ–Ω.")
        exit(1)

    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("news", news))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
    app.run_polling()