import feedparser
import os
import logging
import requests
import re
import asyncio
from html import unescape
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∑–∞–ø—è—Ç—ã–µ)
FEEDS = [
    "https://feeds.washingtonpost.com/rss/politics?itid=lk_inline_manual_2",
    "https://feeds.washingtonpost.com/rss/national",
    "https://feeds.washingtonpost.com/rss/business",
    "https://rss.nytimes.com/services/xml/rss/nyt/Politics.xml",
    "https://www.wsj.com/xml/rss/3_7014.xml",

    "https://www.ft.com/?format=rss",


    "https://www.aljazeera.com/xml/rss/all.xml",
    "https://www.theguardian.com/world/rss",

    "https://rss.politico.com/politico.xml",
    "http://feeds.skynews.com/feeds/rss/world.xml"
]

# –£–¥–∞–ª–µ–Ω–∏–µ HTML-—Ç–µ–≥–æ–≤
def clean_html(raw_html: str) -> str:
    cleanr = re.compile('<.*?>')
    cleantext = re.sub(cleanr, '', raw_html)
    return unescape(cleantext).strip()

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
def translate_text_sync(text: str, lang_from="en", lang_to="ru") -> str:
    if not text.strip():
        return text
    try:
        url = "https://api.mymemory.translated.net/get"
        params = {"q": text[:500], "langpair": f"{lang_from}|{lang_to}"}
        response = requests.get(url, params=params, timeout=10)
        data = response.json()
        return data['responseData']['translatedText']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞: {e}")
        return text

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞
async def translate_text(text: str) -> str:
    return await asyncio.to_thread(translate_text_sync, text)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–∏—Ä–∞–µ—Ç —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π /news.")

# –ö–æ–º–∞–Ω–¥–∞ /news
async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîç –°–∫–∞–Ω–∏—Ä—É—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏, —Å–æ–±–∏—Ä–∞—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")

    failed_sources = []

    for url in FEEDS:
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {url}")
        try:
            feed = feedparser.parse(url)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ RSS {url}: {e}")
            failed_sources.append(url)
            continue

        if feed.bozo:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º: {url} ‚Äî {feed.bozo_exception}")
            failed_sources.append(url)
            continue

        total_news = len(feed.entries)
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {total_news} –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ: {url}")

        entries = feed.entries[:3]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 3 –Ω–æ–≤–æ—Å—Ç–∏
        logger.info(f"üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ {len(entries)} –Ω–æ–≤–æ—Å—Ç–∏")

        for i, entry in enumerate(entries, start=1):
            title = getattr(entry, 'title', "(–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)")
            summary_raw = entry.get("summary", "") or entry.get("description", "") or ""
            summary = clean_html(summary_raw)
            if not summary:
                summary = "(–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è)"
            link = getattr(entry, 'link', "")

            logger.info(f"üî∏ –ù–æ–≤–æ—Å—Ç—å {i}: {title}")

            translated_title = await translate_text(title)
            translated_summary = await translate_text(summary)

            message = (
                f"üì∞ <b>{translated_title}</b>\n"
                f"{translated_summary}\n"
                f"<a href=\"{link}\">–ò—Å—Ç–æ—á–Ω–∏–∫</a>"
            )

            try:
                await update.message.reply_text(
                    message, parse_mode="HTML", disable_web_page_preview=True
                )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    if failed_sources:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n" + "\n".join(failed_sources))
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö."
        )

    await update.message.reply_text("‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª.")
        exit(1)

    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("news", news))

    logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥.")
    app.run_polling()
