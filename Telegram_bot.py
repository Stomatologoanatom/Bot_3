import os
import logging
import re
import asyncio
import requests
from html import unescape
from dotenv import load_dotenv
from telegram import Update, BotCommand, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)
from bs4 import BeautifulSoup  # –î–æ–±–∞–≤–ª—è–µ–º BeautifulSoup

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram.bot").setLevel(logging.WARNING)
logging.getLogger("telegram.ext._application").setLevel(logging.WARNING)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# --- –ê–¥–º–∏–Ω—ã ---
try:
    ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))
except ValueError:
    ADMIN_IDS = []
    logger.warning("‚ö†Ô∏è ADMIN_IDS —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω.")

# --- –¢–µ–º—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã ---
THEMES = {
    "üè≥Ô∏è‚Äç‚ößÔ∏è –ï–≤—Ä–æ–ø–∞": "Topics/Europe.txt",
    "üçú –ê–∑–∏—è": "Topics/Asia.txt",
    "üíµ –ê–º–µ—Ä–∏–∫–∞": "Topics/America.txt",
    "üë≥‚Äç‚ôÇÔ∏è‚úàüè¢üè¢ –ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫": "Topics/MiddleEast.txt",
    "Œµ„Å§‚ñÑ‚ñà‚ñÄ‚ñà‚óè –ù–ê–¢–û": "Topics/NATO.txt"
}

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def get_main_menu():
    return ReplyKeyboardMarkup(
        [
            ["üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"],
            ["‚èπ –ü—Ä–µ—Ä–≤–∞—Ç—å –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π"]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# --- –ú–µ–Ω—é —Å —Ç–µ–º–∞–º–∏ ---
def get_theme_menu():
    return ReplyKeyboardMarkup(
        [[theme] for theme in THEMES.keys()],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# --- –û—á–∏—Å—Ç–∫–∞ HTML ---
def clean_html(raw_html: str) -> str:
    cleanr = re.compile('<.*?>')
    return unescape(re.sub(cleanr, '', raw_html)).strip()

# --- –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ ---
def translate_text_sync(text: str, lang_from="en", lang_to="ru") -> str:
    if not text.strip():
        return text
    try:
        url = "https://api.mymemory.translated.net/get"
        params = {"q": text[:500], "langpair": f"{lang_from}|{lang_to}"}
        response = requests.get(url, params=params, timeout=10)
        return response.json()['responseData']['translatedText']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text

async def translate_text(text: str) -> str:
    return await asyncio.to_thread(translate_text_sync, text)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["searching"] = False
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –Ω–æ–≤–æ—Å—Ç–µ–π.",
        reply_markup=get_main_menu()
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞":
        context.user_data["searching"] = False
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup=get_theme_menu())

    elif text == "‚èπ –ü—Ä–µ—Ä–≤–∞—Ç—å –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π":
        if context.user_data.get("searching", False):
            context.user_data["searching"] = False
            await update.message.reply_text("‚èπ –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–µ—Ä–≤–∞–Ω.", reply_markup=get_theme_menu())
        else:
            await update.message.reply_text("‚ùó –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –∑–∞–ø—É—â–µ–Ω.", reply_markup=get_main_menu())

    elif text in THEMES:
        await handle_theme_choice(update, context)

    else:
        await update.message.reply_text("‚ùì –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=get_main_menu())

# --- –ü–∞—Ä—Å–∏–Ω–≥ HTML –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Å–∞–π—Ç–∞ ---
async def parse_news_from_html(url: str, context: ContextTypes.DEFAULT_TYPE):
    """–ü–∞—Ä—Å–∏–º –Ω–æ–≤–æ—Å—Ç–∏ —Å –æ–±—ã—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø—Ä–∏–º–µ—Ä –ø–æ–¥—Å—Ç—Ä–æ–µ–Ω –ø–æ–¥ —Å–∞–π—Ç —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ <h2 class='news-title'>."""
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
    }
    try:
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')

        # –ü—Ä–∏–º–µ—Ä: –∏—â–µ–º –ø–µ—Ä–≤—ã–µ 3 –Ω–æ–≤–æ—Å—Ç–∏ ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫—Ä–∞—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
        # –ü–æ–º–µ–Ω—è–π —ç—Ç–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–≤–æ–µ–≥–æ —Å–∞–π—Ç–∞!
        news_items = soup.find_all('h2', class_='news-title', limit=3)

        news_data = []
        for item in news_items:
            title = item.get_text(strip=True)
            # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä—è–¥–æ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            summary_tag = item.find_next_sibling('p')
            summary = summary_tag.get_text(strip=True) if summary_tag else ""
            # –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å
            link_tag = item.find('a')
            link = link_tag['href'] if link_tag and 'href' in link_tag.attrs else url

            news_data.append({
                "title": title,
                "summary": summary,
                "link": link
            })

        return news_data

    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ HTML —Å {url}: {e}")
        return []

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π ---
async def handle_theme_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    theme = update.message.text
    feed_file = THEMES.get(theme)

    if not feed_file:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ –º–µ–Ω—é.")
        return

    if not os.path.exists(feed_file):
        await update.message.reply_text(f"‚ùå –§–∞–π–ª '{feed_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with open(feed_file, encoding='utf-8') as f:
        feeds = [line.strip() for line in f if line.strip()]

    if not feeds:
        await update.message.reply_text(f"‚ö†Ô∏è –í —Ñ–∞–π–ª–µ {feed_file} –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
        return

    context.user_data["searching"] = True
    await update.message.reply_text("üì° –ü–æ–ª—É—á–∞—é –Ω–æ–≤–æ—Å—Ç–∏...")

    for url in feeds:
        if not context.user_data.get("searching", False):
            await update.message.reply_text("‚èπ –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.", reply_markup=get_theme_menu())
            return

        logger.info(f"üîÑ –ü–∞—Ä—Å–∏–Ω–≥ HTML: {url}")
        news_items = await parse_news_from_html(url, context)

        if not news_items:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å {url}")
            continue

        for news in news_items:
            if not context.user_data.get("searching", False):
                await update.message.reply_text("‚èπ –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.", reply_markup=get_theme_menu())
                return

            translated_title = await translate_text(news["title"])
            translated_summary = await translate_text(news["summary"])

            message = (
                f"üì∞ <b>{translated_title}</b>\n"
                f"{translated_summary}\n"
                f"<a href=\"{news['link']}\">–ò—Å—Ç–æ—á–Ω–∏–∫</a>"
            )

            await update.message.reply_text(
                message, parse_mode="HTML", disable_web_page_preview=True
            )

    context.user_data["searching"] = False
    await update.message.reply_text("‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.", reply_markup=get_main_menu())

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ ---
async def setup_commands(app):
    await app.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É")
    ])

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        exit(1)

    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu))
    app.post_init = setup_commands

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()
